#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

 int sum_div(int n)
{
    //return int(n/log10(n));// not accurate but returns pretty good approximation
    int count=1;
    int i =1;
    int number_of_divisers=0;
    while(count<n)
    {
        int j =1;
        long int square = i*i +1;
        if((i&1)==0)//i is even 
        {
            while(j<i)
            {
                if (square%j==0){
                number_of_divisers+=1;
                }
                j+=4;
            }
        }else{
             square = square>>1;
             int root = sqrt(square) ;
            while(j<root)
            {
               
                if (square%j==0){
                number_of_divisers+=2;
                }
                j+=4;
            }
            if(root*root==square){number_of_divisers+=1;}
        }
      count+= number_of_divisers;
      i++;
      number_of_divisers=0;
      
    }
    return (--i);

}

vector<long int > insertionSort(vector<long int > a)  
{  
    int n = a.size();
    int i, key, j;  
    for (i = 1; i < n; i++) 
    {  
        key = a[i];  
        j = i - 1;  
        while (j >= 0 && a[j] > key) 
        {  
            a[j + 1] = a[j];  
            j = j - 1;  
        }  
        a[j + 1] = key;  
    } 
    return a ; 
}

vector< long int> populate(vector< long int> Alex,int T){
    
int end=0;
Alex.push_back(6);
for(int i =1;i<T;i++)
{
    long int sq = i*i+1;
    int j=1;
    int k =2;
    
    while(j<i)
         {
          if(sq%j==0)
         {
             Alex.push_back((i)*((sq<<1)-1+i*(j+sq/j)));
         }
         j+=4;
         }
    while(k<i){
         if(sq%k==0 )
         {
             Alex.push_back((i)*((sq<<1)-1+i*(k+sq/k)));
         }
         k+=4;
         }
         j=1;
         sq+=(i<<1)+1;
         i++;
         /*******************************************/
         while(j<i){
         if(sq%j==0)
         {
             Alex.push_back((i)*((sq<<1)-1+i*(j+sq/j)));
             
         }
         j+=4;
     }

    }
sort(Alex.begin(), Alex.end()); 
//Alex = insertionSort(Alex);
return Alex;
} 




    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
int main()
{
    std::ios::sync_with_stdio(false);
    //
    int q=0;
    int Max=0;
    scanf("%d",&q);
    int a[q];
    for(int i =0;i<q;i++)
    {
      scanf("%d",a+i);
      Max = max(Max,a[i]);
    }
    int t = sum_div(Max+1);//div[i] = sum(no.of divisors of t^2+1;for 1<=t<=i)
    vector<long int> Alex;
    t = pow(t+1,4.0/3);
    Alex = populate(Alex,t);
   
    for(int i=0;i<q;i++) {
        
        printf("%ld\n",Alex[a[i]-1]);
        
    } 
    return 0;
        

     
}
